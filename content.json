{"meta":{"title":"Mr Jia的博客","subtitle":"欢迎来到我的博客，希望你在我的博客中找到你想要的。。。","description":"没有小孩天天哭，没有努力天天输","author":"Acmen Jia","url":"http://example.com","root":"/"},"pages":[{"title":"关于","date":"2021-05-14T10:14:34.000Z","updated":"2021-05-16T05:46:40.580Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"关于作者本作者是一位计算机专业的在校大学生，博客主要是为了记录自己的学习记录和总结，当然也希望能帮到有需要的人，所有的文章都是由本作者亲自编写，如有不恰之处或侵权等问题请及时联系作者进行修改或删除。"},{"title":"archives","date":"2021-05-14T10:14:04.000Z","updated":"2021-05-15T11:22:06.288Z","comments":true,"path":"archives/index.html","permalink":"http://example.com/archives/index.html","excerpt":"","text":""},{"title":"caidan","date":"2021-05-13T10:19:41.000Z","updated":"2021-05-13T10:22:16.692Z","comments":true,"path":"caidan/index.html","permalink":"http://example.com/caidan/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-05-14T10:12:52.000Z","updated":"2021-05-15T11:01:28.267Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"home","date":"2021-05-14T10:11:21.000Z","updated":"2021-05-15T11:08:37.851Z","comments":true,"path":"home/index.html","permalink":"http://example.com/home/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-05-14T10:13:34.000Z","updated":"2021-05-15T11:02:40.612Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Spring Boot","slug":"Spring Boot","date":"2021-05-22T10:14:34.000Z","updated":"2021-05-23T08:04:08.470Z","comments":true,"path":"2021/05/22/Spring Boot/","link":"","permalink":"http://example.com/2021/05/22/Spring%20Boot/","excerpt":"Spring Boot简介 Spring Boot是Spring家族的一个子项目，其设计初衷是为了简化Spring配置，从而让用户可以轻松构建独立运行的程序，并极大提高开发效率","text":"Spring Boot简介 Spring Boot是Spring家族的一个子项目，其设计初衷是为了简化Spring配置，从而让用户可以轻松构建独立运行的程序，并极大提高开发效率 一、Spring Boot 入门1、使用Maven方式构建Spring Boot项目1）初始化IDEA（1）Maven初始化​ 如下图，打开IDEA进入欢迎界面，单击【Configure】-&gt;【Settings】选项进入默认项目设置页面，搜索“Maven”找到Maven设置选项，在右侧对应的设置界面中进行Maven初始化设置 ​ 如下图对Maven安装目录（Maven home directory）、Maven的settings配置文件（User settings file）和Maven本地仓库（Local repository)进行配置，配置完成后单击【Apply】-&gt;【OK】完成Maven的初始化设置 （2）JDK初始化​ 在IDEA欢迎界面，单击【Configure】-&gt;【Structure for New Projects】选项进入Project Structure设置页面，选择【Project Settings】-&gt;【Project】选项，在打开的右侧页面中对JDK初始化设置，具体如下图： 2）创建Maven项目​ 在IDEA欢迎页面，单击【Create New Project】按钮创建项目，出现如下图界面： ​ 在上图界面中选择【Maven】选项，右侧选择当前项目的JDK，单击【Next】按钮进入Maven项目创建页面，具体如下图 ​ 项目名称和存储路径是设置好后单击【Finish】按钮完成项目的创建 ​ 项目创建完成后，会默认打开创建Maven项目生成的pom.xml依赖文件 特别注意：在打开的界面中，“Maven projects need to be imported”提示框有两个选项：“ImportChanges”表示导入版本变化，只会导入本次变化的依赖；“Enable Auto-Import”表示开启自动导入，后期会持续监测并自动导入变化的依赖。这里选择“Enable Auto-Import”选项，一旦pom.xml文件发生更改，依赖会自动导入。 3）导入Spring Boot相关依赖​ 打开maven下的pom.xml文件，在该文件中添加构建Spring Boot项目和Web场景开发对应的依赖，代码如下: 1234567891011121314&lt;!--引入Spring Boot依赖--&gt; &lt;parent&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;version&gt;2.4.5&lt;/version&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;!--引入Web场景依赖启动器--&gt;、 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 上述代码说明： 上述代码中，&lt;parent&gt;标签中添加的spring-boot-starter-parent依赖是Spring Boot框架集成项目的统一父类管理依赖，添加该依赖后就可以使用Spring Boot的相关特性；&lt;version&gt;标签指定Spring Boot的版本号是2.4.5； &lt;dependencies&gt;标签中添加的spring-boot-starter-web依赖是Spring Boot框架对Web开发场景集成支持的依赖启动器，添加该依赖后就可以自动导入Spring MVC框架相关依赖进行Web开发了 4）编写主程序启动类​ 在上文创建的项目的java目录下创建一个包，在该包下新建一个主程序启动类,如下图： 启动类中的代码如下： 12345678910import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringApplication;@SpringBootApplication //标记该类为主程序启动类public class MavenApplication &#123; //主程序启动方法 public static void main(String[] args) &#123; SpringApplication.run(MavenApplication.class,args); &#125; &#125; 上述代码说明： 上面代码第3行中的@SpringBootApplication注解是Spring Boot框架的核心注解，该注解用于表明MavenApplication类是Spring Boot项目的主程序启动类。第7行代码调用SpringApplication.run(）方法启动主程序类 5）创建一个用于Web访问的Controller​ 在上文创建的下创建名称为controller的包，在该包下创建一个请求处理控制类，如下图： ​ 类中编写一个请求处理方法，代码如下： 12345678910import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;@RestController //该注解为组合注解，等同于Spring中的@Controller+@ResponseBody注解public class HelloController &#123; @GetMapping(&quot;/hello&quot;) //该注解等同于Spring中@RequestMapping（RequestMethod.GET） public String boot_hello()&#123; return &quot;haha123&quot;; &#125;&#125; 上述代码说明： 请求处理类HelloController和请求处理方法boot_hello()都使用了注解，其中：（1）@RestController 注解为一个组合注解，等同于Spring中的@Controller和@ResponseBody两个注解结合使用的效果。主要作用是将当前类作为控制层的组件添加到Spring容器中，同时该类的方法无法返回JSP页面，而且会返回JSON字符串。（2）@GetMapping注解等同于@RequestMapping（RequestMethod.GET）注解，主要作用是设置方法的访问路径并限定其访问方式为Get。上述代码中，boot_hello（）方法的请求处理路径为“/hello”，并且方法的返回值是一个“haha123”的字符串对象。 6）运行项目运行主程序启动类，项目启动成功后，在控制台上会发现Spring Boot项目默认端口号，此时，可以在浏览器上访问“http:/localhost:8080/hello”,页面上会输出的内容为“haha123”，如下图： 7）简化部署（1）到SpringBoot官网找到“Creating an Executable Jar”，将xml的代码复制到pom.xml文件中，具体如下图： （2）在IDEA中的Maven管理器下的Lifecycle执行package文件，就会自动在taraget下打一个jar包,具体如下图： （3）在cmd中执行该文件,具体如下图： 2、使用Spring Initializr 方式快速构建Spring Boot项目1）创建Spring Boot 项目​ 打开IDEA，单击【Create New Project】新建项目，在弹出的“New Porject”界面中选择【Spring Initializr】选项进行Spring Boot项目快速构建，具体如下图： 上图具体说明： “Project SDK”用于设置创建项目使用的JDK版本“Choose Initializr Service URL”（选择初始化服务地址）这里选择使用默认的初始化服务地址“https://start.apring.io”进行Spring Boot项目创建（特别注意：使用快速方式创建Spring Boot项目时，所在主机须在联网状态下） ​ 选择完成后单击【Next】进入下一步，如下图： 设置好后单击【Next】进入Spring Boot场景依赖选择界面，具体如下图： 对上图的Spring Boot场景依赖选择界面具体说明：（本项目选择的Web开发场景下的Spring Web依赖) （1）页面顶部的中间位置可以选择Spring Boot版本，默认显示的是最新稳定的版本。如果想自定义项目版本号，则需要进入项目的pom.xml文件，在对相应依赖的&lt;version&gt;标签中指定版本号。（2）页面左侧汇总了开发场景。每个开发场景下会包含多种技术实现方案，同时提供多种集成的模块依赖。（3）页面中间展示了开发场景中包含的依赖模块。（4）页面右侧展示已经选择的依赖模块。 选择完成后单击【Next】进入填写项目名称和路径的界面，如下图： 对上图的说明： （1）Project name默认生成与Artifact一致的项目名（2）Project location 默认使用的是上次创建项目所选的地址 填写完成后单击【Finish】完成项目的创建 2）创建一个用于Web访问的Controller在chapter01的com.jia包下创建名称为controller的包，在该包下创建一个请求控制类，并编写请求处理方法，具体代码如下： 12345678910import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;@RestController //该注解为组合注解，等同于Spring中的@Controller+@ResponseBody注解public class HelloController &#123; @GetMapping(&quot;/hello&quot;) //该注解等同于Spring中@RequestMapping（RequestMethod.GET） public String boot_hello()&#123; return &quot;haha123&quot;; &#125;&#125; 3）运行项目运行chapter01项目的主程序启动类Chapter01Application，项目运行成功后，在浏览器上访问“http://localhost:8080/hello”页面上会输出“haha123”具体如下图： 3、Spring Boot原理分析1）POM文件（1）父项目依赖管理1234567891011121314 &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.4.5&lt;/version&gt; &lt;relativePath/&gt; &lt;/parent&gt;他的父项目&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt; &lt;version&gt;2.4.5&lt;/version&gt;&lt;/parent&gt; 上述代码说明： 将spring-boot-starter-parent依赖作为Spring Boot项目的统一父项目依赖管理，并将项目版本号统一为2.4.5，改版本号根据实际开发需求是可以修改的。 spring-boot-dependencies依赖是spring-boot-starter-parent的父项目，是真正管理Spring Boot应用里面的所用依赖版本；是Spring Boot的版本仲裁中心；以后导入依赖默认是不需要写版本的（没有在dependencies里面管理的依赖自然是需要声明版本号的） （2）启动器1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; 上述代码说明： spring-boot-starter: spring-boot场景启动器 spring-boot-starter-web依赖启动器的作用是提供Web开发场景所需要的底层所有依赖文件、 Spring Boot将所有的功能场景都抽取出来，做成一个个的starter（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器 2）Spring Boot自动配置@SpringBootApplication **作用:**Spring Boot应用标注在某个类上说明这个类是Spring Boot的主配置类，Spring Boot就应该运行这个类的main方法类启动Spring Boot应用； @SpringBootApplication是一个组合注解，包含**@SpringBootConfiguration、@ComponentScan、@EnableAutoConfiguration**3个核心注解，它们的作用分别为： @SpringBootConfiguration：他的作用与@Configuration注解相同，都是标识一个可以被组件扫描器扫描的配置类，只不过@SpringBootConfiguration是被Spring Boot进行了重新封装命名。 @ComponentScan：是一个组件包扫描器，用于将指定包中的注解类自动装配到Spring的Bean容器中 @EnableAutoConfiguration：表示开启自动配置功能，该注解是Spring Boot框架最重要的注解，也是实现自动化配置的注解。 @EnableAutoConfiguration注解也是一个组合注解，它主要包括有**@AutoConfigurationPackage和@Import({AutoConfigurationImportSelector.class})**两个核心注解。 @AutoConfigurationPackage：它的功能是由@Import注解实现的，作用是向容器导入注册的所用组件，导入的组件由Registrar决定。它的主要作用是获取项目主程序启动类所在根目录，从而指定后续组件扫描器要扫描的包位置。 @Import({AutoConfigurationImportSelector.class})：给容器中导入一个组件由AutoConfigurationImportSelector.class决定 二、配置文件1、全局配置文件 全局配置文件能够修改SpringBoot自动配置的默认值，Spring Boot使用一个application.properties或者application.yaml的文件作为全局配置文件，配置文件名是固定的，该文件存放在src/main/resource 目录或者类路径的/config，一般会选择resource 目录下。 1）application.properties配置文件 我们可以在application.properties文件中定义Spring Boot项目的相关属性，这些相关属性可以是系统属性、环境变量、命令参数等信息，也可以是自定义配置文件名称和位置。 2）application.yaml配置文件 YAML文件格式是Spring Boot支持的一种JSON超级文件格式，相比于传统的Properties配置文件，YAML是以数据为核心，是一种更为直观且容易被计算机识别的数据序列化格式。比JSON、xml等更合适做配置文件； （1）基本语法key: （空格）value 以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的 例： 123server: port: 8081 path: /hello 注：属性和值大小写敏感 （2）值得写法value值为普通数据类型（如数字，字符串，布尔等） 当YAML配置文件中配置的属性值为普通数据类型时，可以直接配置对应的属性值，字符串默认不用加上单引号或者双引号； 加双引号：不会转义字符串里面的特殊字符；特殊支付会作为本身想表示的意思 例：name： “zhangsan \\n lisi” 输出：zhangsan 换行 lisi 加单引号：会转义字符串中的特殊字符；特殊字符最终只是一个普通的字符串数据 例：name： ‘zhangsan \\n lisi’ 输出 ：zhangsan \\n lisi value值为数组和单列集合 缩进式写法： 用-(空格)值表示数组中的一个元素 12345person: hobby: - play - read - sleep 行内写法： 12person: hobby: [play,read,sleep] value值为Map集合和对象 缩进式写法 1234person: map: k1: v1 k2: v2 行内式写法 12person: map: &#123;k1: v1,k2: v2&#125; 2、配置文件值注入1）使用@ConfigurationProperties注入属性 Spring Boot提供的@ConfigurationProperties注解来快速。方便地将配置文件中的自定义属性值批量注入到某个Bean对象的多个对应属性中。 配置文件 1234567person: id: 2 name: 张三 hobby: [sing,read,sleep] family: [father,mother] map: &#123;k1:v1,k2:v2&#125; pet: &#123;type:cat,name:tom&#125; javaBean 123456789101112@Component //用于将Person类作为Bean注入Spring容器中@ConfigurationProperties(prefix = &quot;person&quot;) //将配置文件中以person开头的属性注入该类中public class Person &#123; private int id; private String name; private List hobby; private String[] family; private Map map; private Pet pet; public int getId() &#123; return id; &#125; 上述代码说明： 上述代码使用@Component 和@ConfigurationProperties(prefix = “person”) 将配置文件中的每个属性映射到person类属性中。 注意：使用ConfigurationProperties注解批量注入属性时，要保证配置文件中的属性与对应实体类的属性名一致，否则无法正确获取并注入属性值。 如果编写配置没有提示，可以导入配置文件处理器 123456&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt; 2）使用@Value注入属性 @Value注解是Spring框架提供的，用来读取配置文件中的属性值并逐个注入Bean对象的对应属性中。Spring Boot框架对Spring框架中的@Value注解进行了默认继承，所以在SpringBoot框架中还可以使用该注解读取和注入配置文件属性值。 配置文件： 1person.id=1 javaBean 12345@Componentpublic class Person &#123; @Value(&quot;$&#123;person.id&#125;&quot;) private int id;&#125; 上述代码说明： 上述代码使用@Component 和@Value用于注入Person的id属性。其中，@Value不仅支持注入Person的id属性，而且还可以直接为id属性赋值。 properties配置文件在idea中乱码问题 3）@Value获取值和@ConfigurationProperties获取值比较 对比点 @ConfigurationProperties @Value 底层框架 SpringBoot Spring 功能 批量注入配置文件中的属性 一个个指定 松散绑定（松散语法） 支持 不支持 SpEL表达式 不支持 支持 JSR303数据校验 支持 不支持 复杂类型封装 支持 不支持 总结： ​ 如果说只在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value ​ 如果说专门编写了一个JavaBean来和配置文件进行映射，就直接使用@ConfigurationProperties 持续更新中 》》》 声明“本内容为作者本人亲自编写，如有不对、不严谨或侵权问题请私聊作者进行修改或删除，若是大佬来刷存在感，请您绕行value众号:”","categories":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"http://example.com/categories/Spring-Boot/"}],"tags":[{"name":"框架","slug":"框架","permalink":"http://example.com/tags/%E6%A1%86%E6%9E%B6/"},{"name":"后端","slug":"后端","permalink":"http://example.com/tags/%E5%90%8E%E7%AB%AF/"}]},{"title":"Spring5入门(一)","slug":"spring1","date":"2021-05-20T10:14:34.000Z","updated":"2021-05-23T08:21:16.133Z","comments":true,"path":"2021/05/20/spring1/","link":"","permalink":"http://example.com/2021/05/20/spring1/","excerpt":"Spring简介 Spring框架是一个开放源代码的应用程序框架，由Rod Johnson发起，是针对bean的生命周期进行管理的轻量级容器（lightweight container）。 Spring解决了开发者在J2EE开发中遇到的许多常见的问题，提供了功能强大IOC、AOP及Web MVC等功能。Spring可以单独应用于构筑应用程序，也可以和Struts、Webwork、Tapestry等众多Web框架组合使用，并且可以与 Swing等桌面应用程序AP组合。","text":"Spring简介 Spring框架是一个开放源代码的应用程序框架，由Rod Johnson发起，是针对bean的生命周期进行管理的轻量级容器（lightweight container）。 Spring解决了开发者在J2EE开发中遇到的许多常见的问题，提供了功能强大IOC、AOP及Web MVC等功能。Spring可以单独应用于构筑应用程序，也可以和Struts、Webwork、Tapestry等众多Web框架组合使用，并且可以与 Swing等桌面应用程序AP组合。 一、Spring入门了解1、Spring概念 Spring是轻量级开源框架,可以解决企业应用开发的复杂性 2、Spring框架的优点 方便解耦、简化开发 支持AOP 方便程序的测试 方便和其他优秀框架整合 降低API的使用难度 支持声明式事务处理 3、Spring的两个核心部分（1)、IOC（控制反转）： 使用Spring框架之后，对象的实例不在由调用者来创建，而是由Spring容器来创建，Spring容器会负者控制程序之间的关系，而不是由调用者的程序代码直接控制。这样，控制权由应用代码转移到了Spring容器，控制权发生了反转。与依赖注入（DI）含义相同，只不过是从两个不同的角度叙述的同一个概念。 （2）、AOP 面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。 4、入门案例（1）Spring5的下载下载网址：https://repo.spring.io/release/org/springframework/spring/选择最新最稳定版本（5.3.7） （2）将下载下来的Spring压缩包进行解压解压完的目录如下： （3）创建一个普通的JAVA工程具体步骤如下图： （4）导入JAR包 在Java工程HelloWork下键一个“lib”的文件夹 将刚才下载的Spring中的四个核心包（spring-beans.jar、spring-context.jar、spring-core.jar、spring-expression.jar)和一个依赖包（commons-logging.jar）（该JAR包可以通过http://commons.apache.org/proper/commons-logging/download_logging.cgi下载）复制到lib文件夹中 将上面的5个JAR包导入到项目中，具体步骤如下： （5）创建接口在ser目录下，创建一个com.jia.ioc包，并在包中创建接口UserDao,然后在接口中定义一个say()方法，具体如下： 1234package com.jia.ioc;public interface UserDao &#123; public void say();&#125; （6）创建接口的实现类在com.jia.ioc包下，创建UserDao接口的实现类UserDaoImpl，该类需要实现接口中的say()方法，并在方法中编写一条输出语句，具体如下： 123456package com.jia.ioc;public class UserDaoImpol implements UserDao &#123; public void say()&#123; System.out.println(&quot;userDao say hello word&quot;); &#125;&#125; （7）创建配置文件在src目录下创建Spring的配置文件ApplicationContext.xml，并在配置文件中创建一个id为userDao的Bean，具体如下： 1234567&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; &lt;bean id=&quot;userDao&quot; class=&quot;com.jia.ioc.UserDaoImpol&quot;/&gt;&lt;/beans&gt; （8）创建测试类在com.jia.ioc包下，创建测试类Text，并在类中编写main()方法。具体如下： 1234567891011121314package com.jia.ioc;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Text &#123; public static void main(String[] args) &#123; //1.初始化spring容器，加载配置文件 ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;); //2.通过容器获取userDao实例 UserDao userDao = (UserDao) applicationContext.getBean(&quot;userDao&quot;); //3.调用实例中的say()方法 userDao.say(); &#125;&#125; 持续更新中 》 》 》 声明“本内容为作者本人亲自编写，如有不对、不严谨或侵权问题请私聊作者进行修改或删除，若是大佬来刷存在感，请您绕行，更多关于编程的知识请关注作者微信公众号:”","categories":[{"name":"SSM","slug":"SSM","permalink":"http://example.com/categories/SSM/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"http://example.com/tags/SSM/"},{"name":"Spring","slug":"Spring","permalink":"http://example.com/tags/Spring/"},{"name":"框架","slug":"框架","permalink":"http://example.com/tags/%E6%A1%86%E6%9E%B6/"}]},{"title":"HTML","slug":"html","date":"2021-05-16T06:01:32.000Z","updated":"2021-05-16T04:53:45.547Z","comments":true,"path":"2021/05/16/html/","link":"","permalink":"http://example.com/2021/05/16/html/","excerpt":"HTML 简介 Hyper Text Markup Language （超文本标记语言）简写HTML，通过标签来标记要显示的网页中的各个部分。网页文件本身是一种文本文件，通过在文本文件中添加标记符，可以告诉浏览器如何显示其中的内容（如：文字如何处理，画面如何安排，图片如何显示等）","text":"HTML 简介 Hyper Text Markup Language （超文本标记语言）简写HTML，通过标签来标记要显示的网页中的各个部分。网页文件本身是一种文本文件，通过在文本文件中添加标记符，可以告诉浏览器如何显示其中的内容（如：文字如何处理，画面如何安排，图片如何显示等） HTML 文件的书写规范12345678&lt;!DOCTYPE html&gt;&lt;!--约束，声明--&gt;&lt;html lang=&quot;zh_CN&quot;&gt;&lt;!--html标签表示html的开始 long=&quot;zh_CN&quot;表示中文 html标签中一般分为两个部分，分别为head和body--&gt;&lt;head&gt;&lt;!-表示头部信息，一般分为三个部分，分别为title标签、css样式、js脚本--&gt; &lt;meta charset=&quot;UTF-8&quot;&gt;&lt;!--表示当前页面使用UTF-8字符集--&gt; &lt;title&gt;Title&lt;/title&gt;&lt;!--表示标题--&gt;&lt;/head&gt;&lt;body&gt;&lt;!--body标签是整个html页面显示的主题内容--&gt;&lt;/html&gt; HTML标签的介绍1. 标签的格式：&lt;标签名&gt;封装的数据&lt;/标签名&gt; 2. 标签名大小写不敏感3. 标签拥有自己的属性（1）基本属性：可以修改简单的样式效果 （2）时间属性：可以直接设置事件响应后的代码 4、标签的分类（1）单标签：&lt;标签名 /&gt; （2）双标签：&lt;标签&gt;封装的数据&lt;/标签&gt; 5、标签的语法（1）标签不能交叉嵌套 例： 正确： &lt;div&gt; &lt;span&gt;哈哈哈&lt;/span&gt;&lt;/div&gt; 错误： &lt;div&gt;&lt;span&gt;哈哈哈&lt;/div&gt;&lt;/span&gt; （2）标签必须正确关闭 1&gt;有文本内容的标签 例： 正确： &lt;div&gt;哈哈哈&lt;/div&gt; 错误： &lt;div&gt;哈哈哈 2&gt;没有文本内容的标签 例： 正确：&lt;br /&gt; 错误：&lt;br&gt; （3）属性必须有值，属性值必须加引号 例： 正确： &lt;font color=”bule”&gt;哈哈哈&lt;/font&gt; 错误1： &lt;font color=bule&gt;哈哈哈&lt;/font&gt; 错误2： &lt;font color &gt;哈哈哈&lt;/font&gt; （4）注解不能嵌套 例： 正确： &lt;!--注解内容--&gt; 错误： &lt;!--&lt;!—注解内容--&gt; --&gt; 注：html代码不是很严谨。有时标签不闭合，也不会报错。 HTML常用标签1、基本的标签 标签 描述 &lt;!DOCTYPE&gt; 定义文档类型。 &lt;HTML&gt; 定义html &lt;body&gt; 定义body元素 &lt;h1&gt; to &lt;h6&gt; 定义标题 1 到标题 6。 &lt;p&gt; 定义段落。 &lt;br&gt; 插入一个换行。 &lt;hr&gt; 定义水平线。 &lt;!----&gt; 定义注释。 2、字符格式化 标签 描述 &lt;b&gt; 定义粗体文本。 &lt;font&gt; 不赞成使用。定义文字的字体、尺寸和颜色 &lt;i&gt; 定义斜体文本。 &lt;em&gt; 定义强调文本。 &lt;big&gt; 定义大号字体文本。 &lt;strong&gt; 定义语气更为强烈的强调文本。 &lt;small&gt; 定义小号字体文本。 &lt;sup&gt; 定义上标文本。 &lt;sub&gt; 定义下标文本。 &lt;bdo&gt; 定义文本显示的方向。 &lt;u&gt; 不赞成使用。定义下划线文本。 3、输出 标签 描述 &lt;pre&gt; 定义预格式文本 &lt;code&gt; 定义计算机代码文本。 &lt;tt&gt; 定义打字机文本。 &lt;kbd&gt; 定义键盘文本。 &lt;var&gt; 定义变量。 &lt;dfn&gt; 定义定义项目。 &lt;samp&gt; 定义样本文本。 &lt;xmp&gt; 不赞成使用。定义预格式文本。 4、块级 标签 描述 &lt;acronym&gt; 定义只取首字母的缩写。 &lt;abbr&gt; 定义缩写。 &lt;address&gt; 定义地址元素。 &lt;blockquote&gt; 定义块引用。 &lt;center&gt; 不赞成使用。定义居中字体。 &lt;q&gt; 定义短的引用。 &lt;cite&gt; 定义引用(citation)。 &lt;ins&gt; 定义被插入文本。 &lt;del&gt; 定义被删除文本。 &lt;s&gt; 不赞成使用。定义加删除线的文本。 &lt;strike&gt; 不赞成使用。定义加删除线的文本。 5、链接 标签 描述 &lt;a&gt; 定义锚。 &lt;link&gt; 定义资源引用(resource reference)。 6、框架 标签 描述 &lt;frame&gt; 定义框架的子窗口 &lt;frameset&gt; 定义框架结构 &lt;noframes&gt; 定义无框架的节 &lt;iframe&gt; 定义内联框架 7、输入 标签 描述 &lt;form&gt; 定义表单。 &lt;input&gt; 定义输入域。 &lt;textarea&gt; 定义文本输入区。 &lt;button&gt; 定义按钮。 &lt;select&gt; 定义下拉式菜单。 &lt;optgroup&gt; 定义选项分组。 &lt;option&gt; 定义下拉列表中的可选项。 &lt;label&gt; 为表单元素创建标记。 &lt;fieldset&gt; 将表单内的相关元素分组。 &lt;legend&gt; 定义框架结构的标题。 &lt;isindex&gt; 不赞成使用。定义单行的输入域 8、列表 标签 描述 &lt;ul&gt; 定义无序列表。 &lt;ol&gt; 定义有序列表。 &lt;li&gt; 定义列表项目。 &lt;dir&gt; 不赞成使用。定义目录列表。 &lt;dl&gt; 定义定义列表。 &lt;dt&gt; 定义定义项目。 &lt;dd&gt; 定义定义描述。 &lt;menu&gt; 不赞成使用。定义菜单列表。 9、图像 标签 描述 &lt;img&gt; 定义图像。 &lt;map&gt; 定义图像映射。 &lt;area&gt; 定义图像地图内部的区域。 10、表格 标签 描述 &lt;table&gt; 定义表格 &lt;caption&gt; 定义表格标题 &lt;th&gt; 定义表格页眉 &lt;tr&gt; 定义表格的行 &lt;td&gt; 定义表格单元 &lt;thead&gt; 定义表格的页眉 &lt;tbody&gt; 定义表格的主体 &lt;tfoot&gt; 定义表格的页脚 &lt;col&gt; 定义用于表格列的属性 &lt;colgroup&gt; 定义表格列的组 11、样式 标签 描述 &lt;style&gt; 定义样式定义 &lt;div&gt; 定义文档中的节 &lt;span&gt; 定义文档中的节 12、元信息 标签 描述 &lt;head&gt; 定义关于文档的信息 &lt;title&gt; 定义文档的标题 &lt;meta&gt; 定义元信息 &lt;base&gt; 定义某个页面当中的所有链接的基准链接 &lt;basefont&gt; 不赞成使用。定义基准字体 13、Programming 标签 描述 &lt;script&gt; 定义一段脚本。 &lt;noscript&gt; 定义 noscript 部分。 &lt;applet&gt; 不赞成使用。定义 applet。 &lt;object&gt; 定义嵌入的对象。 &lt;param&gt; 为对象定义参数。 14、特殊字符（1）最常用的特殊字符 显示结果 描述 实体名称 实体编号 空格 &amp;nbsp; &amp;#160; &lt; 小于号 &amp;lt; &amp;#60; &gt; 大于号 &amp;gt; &amp;#62; &amp; 和号 &amp;amp; &amp;#38; “ 引号 &amp;quot; &amp;#34; ‘ 撇号 &amp;apos; (IE不支持) &amp;#39; （2）其他常用的特殊字符 显示结果 描述 实体名称 实体编号 ￠ 分 &amp;cent; &amp;#162; £ 镑 &amp;pound; &amp;#163; ¥ 日圆 &amp;yen; &amp;#165; § 节 &amp;sect; &amp;#167; © 版权 &amp;copy; &amp;#169; ® 注册商标 &amp;reg; &amp;#174; × 乘号 &amp;times; &amp;#215; ÷ 除号 &amp;divide; &amp;#247; HTML常用标签样例与具体说明1、标题标签代码： 12345678910111213141516171819&lt;body&gt;&lt;!--body标签是整个html页面显示的主题内容--&gt; &lt;!-- 标题标签 需求 1 ：演示标题 1 到 标题 6 的 h1 - h6 都是标题标签 h1 最大 h6 最小 align 属性是对齐属性 left 左对齐 ( 默认 ) center 剧中 right 右对齐 --&gt; &lt;h1 align=&quot;left&quot;&gt;标题 1&lt;/h1&gt; &lt;h2 align=&quot;center&quot;&gt;标题 2&lt;/h2&gt; &lt;h3 align=&quot;right&quot;&gt;标题 3&lt;/h3&gt; &lt;h4&gt;标题 4&lt;/h4&gt; &lt;h5&gt;标题 5&lt;/h5&gt; &lt;h6&gt;标题 6&lt;/h6&gt; &lt;h7&gt;标题 7&lt;/h7&gt;&lt;/body&gt; 2、超链接代码： 123456789&lt;!-- a 标签是 超链接href 属性设置连接的地址target 属性设置哪个目标进行跳转： _self 表示当前页面 ( 默认值 ) _blank 表示打开新页面来进行跳转--&gt;&lt;a href=&quot;http://localhost:8080&quot;&gt;百度&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://localhost:8080&quot; target=&quot;_self&quot;&gt;百度_self&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://localhost:8080&quot; target=&quot;_blank&quot;&gt;百度_blank&lt;/a&gt;&lt;br/&gt; 3、列表标签代码： 12345678910&lt;!-- ul 是无序列表type 属性可以修改列表项前面的符号li 是列表项--&gt;&lt;ul type=&quot;none&quot;&gt; &lt;li&gt;赵四&lt;/li&gt; &lt;li&gt;刘能&lt;/li&gt; &lt;li&gt;小沈阳&lt;/li&gt; &lt;li&gt;宋小宝&lt;/li&gt;&lt;/ul&gt; 4、img标签 img 标签可以在 html 页面上显示图片。 代码： 12345678910111213141516171819202122232425&lt;!-- img 标签是图片标签 , 用来显示图片src 属性可以设置图片的路径width 属性设置图片的宽度height 属性设置图片的高度border 属性设置图片边框大小alt 属性设置当指定路径找不到图片时 , 用来代替显示的文本内容在 JavaSE 中路径也分为相对路径和绝对路径 .相对路径 : 从工程名开始算绝对路径 : 盘符 :/ 目录 / 文件名在 web 中路径分为相对路径和绝对路径两种相对路径 :. 表示当前文件所在的目录.. 表示当前文件所在的上一级目录文件名 表示当前文件所在目录的文件 , 相当于 ./ 文件名 ./ 可以省略绝对路径 :正确格式是 : http://ip:port/ 工程名 / 资源路径错误格式是 : 盘符 :/ 目录 / 文件名--&gt;&lt;img src=&quot;1.jpg&quot; width=&quot;200&quot; height=&quot;260&quot; border=&quot;1&quot; alt=&quot; 美女找不到&quot;/&gt;&lt;img src=&quot;../2.jpg&quot; width=&quot;200&quot; height=&quot;260&quot; /&gt;&lt;img src=&quot;../imgs/3.jpg&quot; width=&quot;200&quot; height=&quot;260&quot; /&gt;&lt;img src=&quot;../imgs/4.jpg&quot; width=&quot;200&quot; height=&quot;260&quot; /&gt;&lt;img src=&quot;../imgs/5.jpg&quot; width=&quot;200&quot; height=&quot;260&quot; /&gt;&lt;img src=&quot;../imgs/6.jpg&quot; width=&quot;200&quot; height=&quot;260&quot; /&gt; 5、表格标签代码： 1234567891011121314151617181920212223242526272829303132&lt;!--需求 1：做一个 带表头的 ，三行，三列的表格，并显示边框需求 2：修改表格的宽度，高度，表格的对齐方式，单元格间距。table 标签是表格标签border 设置表格标签width 设置表格宽度height 设置表格高度align 设置表格相对于页面的对齐方式cellspacing 设置单元格间距tr 是行标签th 是表头标签td 是单元格标签align 设置单元格文本对齐方式b 是加粗标签--&gt;&lt;table align=&quot;center&quot; border=&quot;1&quot; width=&quot;300&quot; height=&quot;300&quot; cellspacing=&quot;0&quot;&gt; &lt;tr&gt; &lt;th&gt;1.1&lt;/th&gt; &lt;th&gt;1.2&lt;/th&gt; &lt;th&gt;1.3&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2.1&lt;/td&gt; &lt;td&gt;2.2&lt;/td&gt; &lt;td&gt;2.3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3.1&lt;/td&gt; &lt;td&gt;3.2&lt;/td&gt; &lt;td&gt;3.3&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 6、跨行跨列表格标签代码： 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!-- 需求 1：新建一个五行，五列的表格，第一行，第一列的单元格要跨两列，第二行第一列的单元格跨两行，第四行第四列的单元格跨两行两列。colspan 属性设置跨列rowspan 属性设置跨行--&gt;&lt;table width=&quot;500&quot; height=&quot;500&quot; cellspacing=&quot;0&quot; border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td colspan=&quot;2&quot;&gt;我是跨两列&lt;/td&gt; &lt;td&gt;1.3&lt;/td&gt; &lt;td&gt;1.4&lt;/td&gt; &lt;td&gt;1.5&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td rowspan=&quot;2&quot;&gt;我是跨两列&lt;/td&gt; &lt;td&gt;2.2&lt;/td&gt; &lt;td&gt;2.3&lt;/td&gt; &lt;td&gt;2.4&lt;/td&gt; &lt;td&gt;2.5&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3.2&lt;/td&gt; &lt;td&gt;3.3&lt;/td&gt; &lt;td&gt;3.4&lt;/td&gt; &lt;td&gt;3.5&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;4.1&lt;/td&gt; &lt;td&gt;4.2&lt;/td&gt; &lt;td&gt;4.3&lt;/td&gt; &lt;td colspan=&quot;2&quot; rowspan=&quot;2&quot;&gt;我夸两行两列&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;5.1&lt;/td&gt; &lt;td&gt;5.2&lt;/td&gt; &lt;td&gt;5.3&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 7、表单标签代码： 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!--需求 1:创建一个个人信息注册的表单界面。包含用户名，密码，确认密码。性别（单选），兴趣爱好（多选），国籍（下拉列表）。隐藏域，自我评价（多行文本域）。重置，提交。--&gt;&lt;!--form 标签就是表单input type=text 是文件输入框 value 设置默认显示内容input type=password 是密码输入框 value 设置默认显示内容input type=radio 是单选框 name 属性可以对其进行分组 checked=&quot;checked&quot;表示默认选中input type=checkbox 是复选框 checked=&quot;checked&quot;表示默认选中input type=reset 是重置按钮 value 属性修改按钮上的文本input type=submit 是提交按钮 value 属性修改按钮上的文本input type=button 是按钮 value 属性修改按钮上的文本input type=file 是文件上传域input type=hidden 是隐藏域 当我们要发送某些信息，而这些信息，不需要用户参与，就可以使用隐藏域（提交的时候同时发送给服务器）select 标签是下拉列表框option 标签是下拉列表框中的选项 selected=&quot;selected&quot;设置默认选中textarea 表示多行文本输入框 （起始标签和结束标签中的内容是默认值）rows 属性设置可以显示几行的高度cols 属性设置每行可以显示几个字符宽度--&gt;&lt;form&gt; 用户名称：&lt;input type=&quot;text&quot; value=&quot; 默认值&quot;/&gt;&lt;br/&gt; 用户密码：&lt;input type=&quot;password&quot; value=&quot;abc&quot;/&gt;&lt;br/&gt; 确认密码：&lt;input type=&quot;password&quot; value=&quot;abc&quot;/&gt;&lt;br/&gt; 性别：&lt;input type=&quot;radio&quot; name=&quot;sex&quot;/&gt;男 &lt;input type=&quot;radio&quot; name=&quot;sex&quot; checked=&quot;checked&quot; /&gt;女&lt;br/&gt; 兴趣爱好：&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; /&gt;Java &lt;input type=&quot;checkbox&quot; /&gt;JavaScript &lt;input type=&quot;checkbox&quot; /&gt;C++&lt;br/&gt; 国籍：&lt;select&gt; &lt;option&gt;--请选择国籍--&lt;/option&gt; &lt;option selected=&quot;selected&quot;&gt;中国&lt;/option&gt; &lt;option&gt;美国&lt;/option&gt; &lt;option&gt;小日本&lt;/option&gt; &lt;/select&gt;&lt;br/&gt; 自我评价： &lt;textarea rows=&quot;10&quot; cols=&quot;20&quot;&gt; 我才是默认值 &lt;/textarea&gt;&lt;br/&gt; &lt;input type=&quot;reset&quot; value=&quot;abc&quot; /&gt; &lt;input type=&quot;submit&quot;/&gt;&lt;/form&gt; 表单格式化： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;form&gt; &lt;h1 align=&quot;center&quot;&gt;用户注册&lt;/h1&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;td&gt; 用户名称：&lt;/td&gt; &lt;td&gt; &lt;input type=&quot;text&quot; value=&quot; 默认值&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; 用户密码：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; value=&quot;abc&quot;/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;确认密码：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; value=&quot;abc&quot;/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;性别：&lt;/td&gt; &lt;td&gt; &lt;input type=&quot;radio&quot; name=&quot;sex&quot;/&gt;男 &lt;input type=&quot;radio&quot; name=&quot;sex&quot; checked=&quot;checked&quot; /&gt;女 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; 兴趣爱好：&lt;/td&gt; &lt;td&gt; &lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; /&gt;Java &lt;input type=&quot;checkbox&quot; /&gt;JavaScript &lt;input type=&quot;checkbox&quot; /&gt;C++ &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;国籍：&lt;/td&gt; &lt;td&gt; &lt;select&gt; &lt;option&gt;--请选择国籍--&lt;/option&gt; &lt;option selected=&quot;selected&quot;&gt;中国&lt;/option&gt; &lt;option&gt;美国&lt;/option&gt; &lt;option&gt;小日本&lt;/option&gt; &lt;/select&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;自我评价：&lt;/td&gt; &lt;td&gt;&lt;textarea rows=&quot;10&quot; cols=&quot;20&quot;&gt;我才是默认值&lt;/textarea&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;reset&quot; /&gt;&lt;/td&gt; &lt;td align=&quot;center&quot;&gt;&lt;input type=&quot;submit&quot;/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/form 表单提交细节： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;!--form 标签是表单标签action 属性设置提交的服务器地址method 属性设置提交的方式 GET(默认值)或 POST表单提交的时候，数据没有发送给服务器的三种情况：1、表单项没有 name 属性值2、单选、复选（下拉列表中的 option 标签）都需要添加 value 属性，以便发送给服务器3、表单项不在提交的 form 标签中GET 请求的特点是：1、浏览器地址栏中的地址是：action 属性[+?+请求参数]请求参数的格式是：name=value&amp;name=value2、不安全3、它有数据长度的限制POST 请求的特点是：1、浏览器地址栏中只有 action 属性值2、相对于 GET 请求要安全3、理论上没有数据长度的限制--&gt;&lt;form action=&quot;http://localhost:8080&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;login&quot; /&gt; &lt;h1 align=&quot;center&quot;&gt;用户注册&lt;/h1&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;td&gt; 用户名称：&lt;/td&gt; &lt;td&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot; 默认值&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; 用户密码：&lt;/td&gt; &lt;td&gt; &lt;input type=&quot;password&quot; name=&quot;password&quot; value=&quot;abc&quot;/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;性别：&lt;/td&gt; &lt;td&gt; &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;boy&quot;/&gt;男 &lt;input type=&quot;radio&quot; name=&quot;sex&quot; checked=&quot;checked&quot; value=&quot;girl&quot; /&gt;女 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; 兴趣爱好：&lt;/td&gt; &lt;td&gt; &lt;input name=&quot;hobby&quot; type=&quot;checkbox&quot; checked=&quot;checked&quot; value=&quot;java&quot;/&gt;Java &lt;input name=&quot;hobby&quot; type=&quot;checkbox&quot; value=&quot;js&quot;/&gt;JavaScript &lt;input name=&quot;hobby&quot; type=&quot;checkbox&quot; value=&quot;cpp&quot;/&gt;C++ &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;国籍：&lt;/td&gt; &lt;td&gt; &lt;select name=&quot;country&quot;&gt; &lt;option value=&quot;none&quot;&gt;--请选择国籍--&lt;/option&gt; &lt;option value=&quot;cn&quot; selected=&quot;selected&quot;&gt;中国&lt;/option&gt; &lt;option value=&quot;usa&quot;&gt;美国&lt;/option&gt; &lt;option value=&quot;jp&quot;&gt;小日本&lt;/option&gt; &lt;/select&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;自我评价：&lt;/td&gt; &lt;td&gt; &lt;textarea name=&quot;desc&quot; rows=&quot;10&quot; cols=&quot;20&quot;&gt;我才是默认值&lt;/textarea&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;reset&quot; /&gt;&lt;/td&gt; &lt;td align=&quot;center&quot;&gt;&lt;input type=&quot;submit&quot;/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/form&gt; 8、其他标签代码： 123456789101112&lt;!--需求 1：div、span、p 标签的演示div 标签 默认独占一行span 标签 它的长度是封装数据的长度p 段落标签 默认会在段落的上方或下方各空出一行来（如果已有就不再空）--&gt;&lt;div&gt;div 标签 1&lt;/div&gt;&lt;div&gt;div 标签 2&lt;/div&gt;&lt;span&gt;span 标签 1&lt;/span&gt;&lt;span&gt;span 标签 2&lt;/span&gt;&lt;p&gt;p 段落标签 1&lt;/p&gt;&lt;p&gt;p 段落标签 2&lt;/p&gt; 声明“本内容为作者本人亲自编写，如有不对、不严谨或侵权问题请私聊作者进行修改或删除，若是大佬来刷存在感，请您绕行，更多关于编程的知识请关注作者微信公众号:”","categories":[{"name":"Java Web","slug":"Java-Web","permalink":"http://example.com/categories/Java-Web/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"CSS技术","slug":"css","date":"2021-05-16T04:01:32.000Z","updated":"2021-05-17T11:06:01.450Z","comments":true,"path":"2021/05/16/css/","link":"","permalink":"http://example.com/2021/05/16/css/","excerpt":"CSS技术 CSS 是「层叠样式表单」。是用于(增强)控制网页样式并允许将样式信息与网页内容分离的一种标记性语言。","text":"CSS技术 CSS 是「层叠样式表单」。是用于(增强)控制网页样式并允许将样式信息与网页内容分离的一种标记性语言。 语法规则1、格式：123选择器&#123; 属性：值； &#125; 选择器：浏览器根据“选择器”决定受 CSS 样式影响的 HTML 元素（标签）。 属性 (property) ：是你要改变的样式名，并且每个属性都有一个值。属性和值被冒号分开，并由花括号包围，这样就组成了一个完整的样式声明（declaration），例如：p {color: blue} 多个声明：如果要定义不止一个声明，则需要用分号将每个声明分开。虽然最后一条声明的最后可以不加分号(但尽量在每条声明的末尾都加上分号) 注：一般一行只描述一个属性 2、CSS注释：1/*CSS注释的内容*/ CSS和 HTML 的结合方式1、 方式一在标签的 style 属性上设置”key:value value;”，修改标签样式： 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!--分别定义两个 div、span 标签，分别修改每个 div 标签的样式为：边框 1 个像素，实线，红色。--&gt; &lt;div style=&quot;border: 1px solid red;&quot;&gt;div 标签 1&lt;/div&gt; &lt;div style=&quot;border: 1px solid red;&quot;&gt;div 标签 2&lt;/div&gt; &lt;span style=&quot;border: 1px solid red;&quot;&gt;span 标签 1&lt;/span&gt; &lt;span style=&quot;border: 1px solid red;&quot;&gt;span 标签 2&lt;/span&gt; &lt;/body&gt;&lt;/html&gt; 这种方式的缺点： （1）如果标签多了。样式多了。代码量非常庞大。 （2）可读性非常差。 （3）CSS代码没什么复用性可言。 2.方式二在 head 标签中，使用 style 标签来定义各种自己需要的 css 样式： 123456789101112131415161718192021222324252627282930格式： xxx &#123; Key :value value; &#125;例 ：&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;!--style 标签专门用来定义 css 样式代码--&gt; &lt;style type=&quot;text/css&quot;&gt; /* 需求 1：分别定义两个 div、span 标签，分别修改每个 div 标签的样式为：边框 1 个像素，实线，红色。*/ div&#123; border: 1px solid red; &#125; span&#123; border: 1px solid red; &#125;&lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;div 标签 1&lt;/div&gt; &lt;div&gt;div 标签 2&lt;/div&gt; &lt;span&gt;span 标签 1&lt;/span&gt; &lt;span&gt;span 标签 2&lt;/span&gt; &lt;/body&gt;&lt;/html&gt; 这种方式的缺点： （1）只能在同一页面内复用代码，不能在多个页面中复用 CSS 代码。 （2）维护起来不方便，实际的项目中会有成千上万的页面，要到每个页面中去修改。工作量太大了。 3.方式三把 css 样式写成一个单独的 css 文件，再通过 link 标签引入即可复用。使用 html 的 &lt;link rel=”stylesheet” type=”text/css”href=”./styles.css”/&gt; 标签 导入 css 样式文件。 （1）css 文件内容： 123456div&#123; border: 1px solid yellow;&#125;span&#123; border: 1px solid red;&#125; （2）html文件内容 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;!--link 标签专门用来引入 css 样式代码--&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;1.css&quot;/&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;div 标签 1&lt;/div&gt; &lt;div&gt;div 标签 2&lt;/div&gt; &lt;span&gt;span 标签 1&lt;/span&gt; &lt;span&gt;span 标签 2&lt;/span&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"Java Web","slug":"Java-Web","permalink":"http://example.com/categories/Java-Web/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]}],"categories":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"http://example.com/categories/Spring-Boot/"},{"name":"SSM","slug":"SSM","permalink":"http://example.com/categories/SSM/"},{"name":"Java Web","slug":"Java-Web","permalink":"http://example.com/categories/Java-Web/"}],"tags":[{"name":"框架","slug":"框架","permalink":"http://example.com/tags/%E6%A1%86%E6%9E%B6/"},{"name":"后端","slug":"后端","permalink":"http://example.com/tags/%E5%90%8E%E7%AB%AF/"},{"name":"SSM","slug":"SSM","permalink":"http://example.com/tags/SSM/"},{"name":"Spring","slug":"Spring","permalink":"http://example.com/tags/Spring/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]}